---
import { type CollectionEntry, getCollection } from "astro:content";

import BaseLayout from "@/layouts/BaseLayout.astro";

import ContactCTA from "@/components/ContactCTA.astro";
import Hero from "@/components/Hero.astro";
import Icon from "@/components/Icon.astro";
import Pill from "@/components/Pill.astro";
import { render } from "astro:content";
import CallToAction from "@/components/CallToAction.astro";

interface Props {
  entry: CollectionEntry<"posts">;
}

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return posts.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await render(entry);
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
  <section class="stack gap-20 bg-color-dark bg-color-ligth">
    <header>
      <div class="flex flex-col items-center justify-center mt-20">
        <div class="back-link">
          <CallToAction href="/posts/">
            <span
              class="flex flex-row justify-center items-center gap-3 text-base text-center"
            >
              <Icon icon="arrow-left" size="1em" />
              Todos los posts</span
            >
          </CallToAction>
        </div>
        <Hero tagline="" title={entry.data.title} align="center">
          <p class="description">{entry.data.description}</p>
          <div class="tags">
            {entry.data.tags.map((t) => <Pill>{t}</Pill>)}
          </div>
        </Hero>
      </div>
    </header>
    <main class="wrapper">
      <div class=" flex flex-col-reverse lg:grid lg:grid-cols-2 lg:gap-x-5">
        <div class="content prose-slate mb-5">
          <Content />
        </div>
        <div class="w-[50%] items-center lg:w-[70%]" >
          <img
            transition:name=`img-${entry.data.title}`
            src={entry.data.img}
            alt=""-
          />
        </div>
      </div>
    </main>
  </section>
  <ContactCTA />
</BaseLayout>

<style>
  header {
    padding-bottom: 1em;
  }

  .back-link {
    display: none;
  }

  .details {
    display: flex;
    flex-direction: column;
    padding: 0.5rem;
    gap: 1.5rem;
    justify-content: space-between;
    align-items: center;
  }

  .tags {
    display: flex;
    gap: 0.5rem;
  }

  .description {
    font-size: var(--text-lg);
    max-width: 54ch;
  }

  .content {
    max-width: 55ch;
    margin-inline: auto;
  }

  .content > :global(* + *) {
    margin-top: 1rem;
  }

  .content :global(h1),
  .content :global(h2),
  .content :global(h3),
  .content :global(h4),
  .content :global(h5) {
    margin: 1.5rem 0;
  }

  .content :global(img) {
    border-radius: 1.5rem;
    box-shadow: var(--shadow-sm);
    background: var(--gradient-subtle);
    border: 1px solid var(--gray-800);
  }

  .content :global(blockquote) {
    font-size: var(--text-lg);
    font-family: var(--font-brand);
    font-weight: 600;
    line-height: 1.1;
    padding-inline-start: 1.5rem;
    border-inline-start: 0.25rem solid var(--accent-dark);
    color: var(--gray-0);
  }

  .back-link,
  .content :global(a) {
    text-decoration: 1px solid underline transparent;
    text-underline-offset: 0.25em;
    transition: text-decoration-color var(--theme-transition);
  }

  .back-link:hover,
  .back-link:focus,
  .content :global(a:hover),
  .content :global(a:focus) {
    text-decoration-color: currentColor;
  }

  @media (min-width: 50em) {
    .back-link {
      display: flex;
      align-self: flex-start;
      position: relative;
      top: 0px;
      left: 20px;
      height: 2rem;
      gap: 0.5rem;
    }

    .details {
      flex-direction: row;
      gap: 2.5rem;
    }

    .content :global(blockquote) {
      font-size: var(--text-2xl);
    }
  }
</style>
